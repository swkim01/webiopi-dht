diff -uNr WebIOPi-0.7.1/python/native/bridge.c WebIOPi-0.7.1-new/python/native/bridge.c
--- WebIOPi-0.7.1/python/native/bridge.c	2013-03-17 21:56:40.000000000 +0900
+++ WebIOPi-0.7.1-new/python/native/bridge.c	2016-04-07 18:06:01.211491561 +0900
@@ -604,7 +604,7 @@
 #if PY_MAJOR_VERSION > 2
 static struct PyModuleDef python_module = {
 	PyModuleDef_HEAD_INIT,
-	"_webiopi.GPIO", /* name of module */
+	"webiopi.GPIO", /* name of module */
 	NULL,       /* module documentation, may be NULL */
 	-1,         /* size of per-interpreter state of the module,
 				  or -1 if the module keeps state in global variables. */
@@ -625,20 +625,20 @@
 	if ((module = PyModule_Create(&python_module)) == NULL)
 		goto exit;
 #else
-	if ((module = Py_InitModule("_webiopi.GPIO", python_methods)) == NULL)
+	if ((module = Py_InitModule("webiopi.GPIO", python_methods)) == NULL)
 		goto exit;
 #endif
 
-	_SetupException = PyErr_NewException("_webiopi.GPIO.SetupException", NULL, NULL);
+	_SetupException = PyErr_NewException("webiopi.GPIO.SetupException", NULL, NULL);
 	PyModule_AddObject(module, "SetupException", _SetupException);
 
-	_InvalidDirectionException = PyErr_NewException("_webiopi.GPIO.InvalidDirectionException", NULL, NULL);
+	_InvalidDirectionException = PyErr_NewException("webiopi.GPIO.InvalidDirectionException", NULL, NULL);
 	PyModule_AddObject(module, "InvalidDirectionException", _InvalidDirectionException);
 
-	_InvalidChannelException = PyErr_NewException("_webiopi.GPIO.InvalidChannelException", NULL, NULL);
+	_InvalidChannelException = PyErr_NewException("webiopi.GPIO.InvalidChannelException", NULL, NULL);
 	PyModule_AddObject(module, "InvalidChannelException", _InvalidChannelException);
 
-	_InvalidPullException = PyErr_NewException("_webiopi.GPIO.InvalidPullException", NULL, NULL);
+	_InvalidPullException = PyErr_NewException("webiopi.GPIO.InvalidPullException", NULL, NULL);
 	PyModule_AddObject(module, "InvalidPullException", _InvalidPullException);
 
 	_gpioCount = Py_BuildValue("i", GPIO_COUNT);
diff -uNr WebIOPi-0.7.1/python/setup.py WebIOPi-0.7.1-new/python/setup.py
--- WebIOPi-0.7.1/python/setup.py	2015-02-05 05:21:44.000000000 +0900
+++ WebIOPi-0.7.1-new/python/setup.py	2016-04-07 19:19:38.856949458 +0900
@@ -1,4 +1,4 @@
-from setuptools import setup, Extension
+from distutils.core import setup, Extension
 
 classifiers = ['Development Status :: 3 - Alpha',
                'Operating System :: POSIX :: Linux',
@@ -33,5 +33,5 @@
                           "webiopi.devices.sensor",
                           "webiopi.devices.shield"
                           ],
-      ext_modules      = [Extension('_webiopi.GPIO', ['native/bridge.c', 'native/gpio.c', 'native/cpuinfo.c'])],
+      ext_modules      = [Extension('webiopi.GPIO', ['native/bridge.c', 'native/gpio.c', 'native/cpuinfo.c'])],
       )
diff -uNr WebIOPi-0.7.1/python/webiopi/__init__.py WebIOPi-0.7.1-new/python/webiopi/__init__.py
--- WebIOPi-0.7.1/python/webiopi/__init__.py	2014-01-29 08:13:34.000000000 +0900
+++ WebIOPi-0.7.1-new/python/webiopi/__init__.py	2016-04-07 18:03:22.331414560 +0900
@@ -24,9 +24,8 @@
 
 from webiopi.devices import bus as _bus
 
-
 try:
-    import _webiopi.GPIO as GPIO
+    import webiopi.GPIO as GPIO
 except:
     pass
 
diff -uNr WebIOPi-0.7.1/python/webiopi/devices/digital/gpio.py WebIOPi-0.7.1-new/python/webiopi/devices/digital/gpio.py
--- WebIOPi-0.7.1/python/webiopi/devices/digital/gpio.py	2013-04-18 06:41:06.000000000 +0900
+++ WebIOPi-0.7.1-new/python/webiopi/devices/digital/gpio.py	2016-04-07 19:03:12.060353205 +0900
@@ -17,7 +17,7 @@
 from webiopi.devices.digital import GPIOPort
 from webiopi.decorators.rest import request, response
 try:
-    import _webiopi.GPIO as GPIO
+    import webiopi.GPIO as GPIO
 except:
     pass
 
diff -uNr WebIOPi-0.7.1/python/webiopi/devices/sensor/__init__.py WebIOPi-0.7.1-new/python/webiopi/devices/sensor/__init__.py
--- WebIOPi-0.7.1/python/webiopi/devices/sensor/__init__.py	2014-02-22 06:50:48.000000000 +0900
+++ WebIOPi-0.7.1-new/python/webiopi/devices/sensor/__init__.py	2016-04-02 11:52:59.557155219 +0900
@@ -193,4 +193,5 @@
 DRIVERS["tslXXXX"] = ["TSL2561", "TSL2561CS", "TSL2561T", "TSL4531", "TSL45311", "TSL45313", "TSL45315", "TSL45317"]
 DRIVERS["vcnl4000"] = ["VCNL4000"]
 DRIVERS["hytXXX"] = ["HYT221"]
+DRIVERS["dhtXX"] = ["DHT11", "DHT22", "AM2302"]
 
diff -uNr WebIOPi-0.7.1/python/webiopi/devices/sensor/dhtXX.py WebIOPi-0.7.1-new/python/webiopi/devices/sensor/dhtXX.py
--- WebIOPi-0.7.1/python/webiopi/devices/sensor/dhtXX.py	1970-01-01 09:00:00.000000000 +0900
+++ WebIOPi-0.7.1-new/python/webiopi/devices/sensor/dhtXX.py	2016-04-02 11:52:59.557155219 +0900
@@ -0,0 +1,52 @@
+from time import sleep
+from webiopi.utils.types import toint
+import Adafruit_DHT
+from webiopi.devices.sensor import Temperature,Humidity
+
+class DHT11(Temperature, Humidity):
+    VAL_RETRIES = 5
+    sensor = Adafruit_DHT.DHT11
+    pin = 4
+
+    def __init__(self, pin="4"):
+        self.pin = toint(pin)
+        pass
+
+    def __str__(self):
+        return "DHT11(pin=%02d)" % self.pin
+
+    def __family__(self):
+        return [Temperature.__family__(self), Humidity.__family__(self)]
+
+    def readRawData(self):
+        for i in range(self.VAL_RETRIES):
+            raw_h, raw_t = Adafruit_DHT.read_retry(self.sensor, self.pin)
+            if raw_h is not None and raw_t is not None:
+                return (raw_t, raw_h/100)
+
+        #Stale was never 0, so datas are not actual
+        raise Exception("DHT11(pin=%02d): data fetch timeout" % self.pin)
+
+    def __getCelsius__(self):
+        (raw_t, raw_h) = self.readRawData()
+        return raw_t
+
+    def __getFahrenheit__(self):
+        return self.Celsius2Fahrenheit()
+
+    def __getKelvin__(self):
+        return self.Celsius2Kelvin()
+
+    def __getHumidity__(self):
+        (raw_t, raw_h) = self.readRawData()
+        return raw_h
+
+class DHT22(DHT11):
+    def __init__(self, pin=4):
+        DHT11.__init__(self, pin)
+        self.sensor = Adafruit_DHT.DHT22
+
+class AM2302(DHT11):
+    def __init__(self, pin=4):
+        DHT11.__init__(self, pin)
+        self.sensor = Adafruit_DHT.AM2302
diff -uNr WebIOPi-0.7.1/python/webiopi/protocols/coap.py WebIOPi-0.7.1-new/python/webiopi/protocols/coap.py
--- WebIOPi-0.7.1/python/webiopi/protocols/coap.py	2014-02-01 00:45:33.000000000 +0900
+++ WebIOPi-0.7.1-new/python/webiopi/protocols/coap.py	2016-04-07 18:07:34.451535375 +0900
@@ -29,7 +29,7 @@
     from urlparse import urlparse
 
 try :
-    import _webiopi.GPIO as GPIO
+    import webiopi.GPIO as GPIO
 except:
     pass
 
diff -uNr WebIOPi-0.7.1/python/webiopi/protocols/http.py WebIOPi-0.7.1-new/python/webiopi/protocols/http.py
--- WebIOPi-0.7.1/python/webiopi/protocols/http.py	2014-02-22 07:31:18.000000000 +0900
+++ WebIOPi-0.7.1-new/python/webiopi/protocols/http.py	2016-04-07 18:02:08.271377631 +0900
@@ -30,7 +30,7 @@
     import BaseHTTPServer
 
 try :
-    import _webiopi.GPIO as GPIO
+    import webiopi.GPIO as GPIO
 except:
     pass
 
diff -uNr WebIOPi-0.7.1/python/webiopi/protocols/rest.py WebIOPi-0.7.1-new/python/webiopi/protocols/rest.py
--- WebIOPi-0.7.1/python/webiopi/protocols/rest.py	2013-04-18 06:41:06.000000000 +0900
+++ WebIOPi-0.7.1-new/python/webiopi/protocols/rest.py	2016-04-07 19:03:42.290606842 +0900
@@ -21,7 +21,7 @@
 from webiopi.devices.bus import BUSLIST
 
 try:
-    import _webiopi.GPIO as GPIO
+    import webiopi.GPIO as GPIO
 except:
     pass
 
diff -uNr WebIOPi-0.7.1/setup.sh WebIOPi-0.7.1-new/setup.sh
--- WebIOPi-0.7.1/setup.sh	2015-02-05 05:21:44.000000000 +0900
+++ WebIOPi-0.7.1-new/setup.sh	2016-04-02 11:54:49.986798379 +0900
@@ -1,7 +1,7 @@
 #!/bin/sh
 # WebIOPi setup script
 
-SEARCH="python python3"
+SEARCH="python"
 FOUND=""
 INSTALLED=""
 
@@ -62,7 +62,7 @@
 # Ensure WebIOPi is installed to continue
 if [ -z "$INSTALLED" ]; then
 	if [ -z "$FOUND" ]; then
-		echo "ERROR: WebIOPi cannot be installed - neither python or python3 found"
+		echo "ERROR: WebIOPi cannot be installed - python not found"
 		exit 1
 	else
 		echo "ERROR: WebIOPi cannot be installed - please check errors above"
